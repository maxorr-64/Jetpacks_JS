{"mappings":"AAAA,IAAI,YAAY;AAChB,IAAI,UAAU;AACd,IAAI,kBAAkB;IAAC,IAAG;IAAK,MAAK;IAAK,OAAM;IAAK,MAAK;IAAK,OAAO;AAAG;AACxE,IAAI,aAAa;IAAC,OAAO;IAAM,MAAM;IAAK,KAAK;IAAI,QAAO;AAAG;AAC7D,IAAI,aAAa,SAAS,cAAc,CAAC;AACzC,MAAM,kBAAkB;AACxB,MAAM,eAAe;AACrB,wDAAwD;AACxD,WAAW;AACX,IAAI,eAAe;AACnB,IAAI,YAAY,SAAS,cAAc,CAAC;AAExC,IAAI,gBAAgB;IAChB,GAAG,WAAW,IAAI;IAClB,GAAG,WAAW,GAAG;IACjB,SAAS;IACT,WAAW;IACX,UAAU;IACV,YAAY;IACZ,YAAY;IACZ,KAAK;IACL,KAAK;IACL,gBAAgB;IAChB,WAAU;IACV,oBAAoB;AACxB;AAEA,IAAI,SAAS,IAAI,OAAO;AACxB,IAAI,QAAQ,EAAE;AAGd,IAAI,iBAAiB;IACjB,IAAI,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;IAC1C,IAAG,YAAY,iBAAiB;QAC5B,IAAI,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,WAAW,KAAK;QACnD,MAAM,KAAK,WAAW,IAAI,CACtB,IAAI,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,WAAW,KAAK;QAEnD,IAAI,IAAI,WAAW,GAAG;QACtB,MAAM,IAAI,CAAC,IAAI,KAAK,GAAE,GAAE,SAAQ;IACpC;AACJ;AACA,MAAM,oBAAoB,CAAC,KAAK;IAC5B,IAAI,MAAM,CAAC,IAAI,OAAO,CAAC,SAAS;IAChC,OAAO,MAAM;AACjB;AAEA,MAAM,WAAW,CAAC;IACd,IAAI,OAAO,CAAC,CAAC;QACT,IAAG,IAAI,IAAI,IACP,kBAAkB,KAAK;IAE/B;AACJ;AAEA,MAAM,uBAAuB,CAAC,OAAO;IACjC,OACI,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,KAAK,IAC/B,MAAM,CAAC,GAAG,MAAM,KAAK,GAAG,MAAM,CAAC,IAC/B,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,MAAM,MAAM,IAChC,MAAM,CAAC,GAAG,MAAM,MAAM,GAAG,MAAM,CAAC;AAExC;AAEA,MAAM,sBAAsB,CAAC,MAAM;IAC/B,IAAI,aAAa;IACjB,KAAK,OAAO,CAAC,CAAC;QACV,KAAK,OAAO,CAAC,CAAC;YACV,IAAG,qBAAqB,UAAU,WAAW;gBACzC,kBAAkB,MAAM;gBACxB,kBAAkB,MAAM;gBACxB,cAAY;YAChB;QACJ;IACJ;IACA,OAAO;AACX;AAEA,MAAM,wBAAwB,CAAC,QAAQ;IACnC,IAAI,aAAa;IACjB,IAAI,OAAO,CAAC,CAAC;QACT,IAAG,qBAAqB,QAAQ,MAC5B,cAAc;IAEtB;IACA,OAAO;AACX;AACA,cAAc;AACd,YACI;IACI,OAAO,IAAI,CAAC;IACZ,SAAS,OAAO,MAAM;IACtB;IACA,SAAS;IACT,oBAAoB,OAAO,MAAM,EAAE;IACnC,gBAAgB,sBAAsB,QAAQ;IAC9C,UAAU,SAAS,GAAG,YAAY,aAAa,QAAQ;AAC3D,GAAG","sources":["src/index.js"],"sourcesContent":["let game_tick = 20;\nlet gravity = 5;\nlet player_controls = {up:\"w\", down:\"s\", right:\"d\", left:'a', shoot: \"f\"};\nlet boundaries = {right: 1090, left: 378, top: 55, bottom:650};\nlet player_div = document.getElementById(\"player\");\nconst fuel_gen_cutoff = 1;\nconst max_rand_val = 1000;\n///const laser_audio = require(\"../../laser_sound.mp3\");\n//debugger;\nlet player_score = 0;\nlet score_div = document.getElementById(\"player_score\");\n\nlet player_params = {\n    x: boundaries.left,\n    y: boundaries.top,\n    gravity: gravity,\n    game_tick: game_tick,\n    controls: player_controls,\n    boundaries: boundaries,\n    left_right: 10,\n    jet: 15,\n    div: player_div,\n    laser_velocity: 10,\n    direction:\"right\",\n    laser_sound_effect: \"../assets/laser/laser_sound.mp3\"\n}\n\nlet player = new Player(player_params);\nlet fuels = [];\n\n\nlet fuel_generator = () => {\n    let rand_val = Math.floor(Math.random() * max_rand_val);\n    if(rand_val <= fuel_gen_cutoff) {\n        let x = Math.floor(Math.random() * boundaries.right);\n        while(x <= boundaries.left) {\n            x = Math.floor(Math.random() * boundaries.right);\n        }\n        let y = boundaries.top;\n        fuels.push(new Fuel(x,y,gravity,boundaries));\n    }\n}\nconst delete_arr_entity = (arr, entity) => {\n    arr.splice(arr.indexOf(entity), 1);\n    entity.delete();\n};\n\nconst move_arr = (arr) => {\n    arr.forEach((val) => {\n        if(val.move()) {\n            delete_arr_entity(arr, val);\n        }\n    })\n}\n\nconst rect_collision_check = (rect1, rect2) => {\n    return (\n        rect1.x < rect2.x + rect2.width &&\n        rect1.x + rect1.width > rect2.x &&\n        rect1.y < rect2.y + rect2.height &&\n        rect1.y + rect1.height > rect2.y\n    );\n}\n\nconst arr_collision_check = (arr1, arr2) => {\n    let collisions = 0;\n    arr1.forEach((entity_1) => {\n        arr2.forEach((entity_2) => {\n            if(rect_collision_check(entity_1, entity_2)) {\n                delete_arr_entity(arr1, entity_1);\n                delete_arr_entity(arr2, entity_2);\n                collisions+=1;\n            }\n        })\n    });\n    return collisions;\n}\n\nconst entity_arr_collisions = (entity, arr) => {\n    let collisions = 0;\n    arr.forEach((val) => {\n        if(rect_collision_check(entity, val)) {\n            collisions += 1;\n        }\n    });\n    return collisions;\n}\n//Main engine:\nsetInterval(\n    ()=> {\n        player.move(player_div);\n        move_arr(player.lasers);\n        fuel_generator();\n        move_arr(fuels);\n        arr_collision_check(player.lasers, fuels);\n        player_score += entity_arr_collisions(player, fuels);\n        score_div.innerHTML = \"Score: \" + player_score.toString();\n    }, game_tick\n);\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}